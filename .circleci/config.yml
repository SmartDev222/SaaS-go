version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.11
      - image: circleci/redis
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: ""

    working_directory: /tmp/gosaas

    environment: # environment variables for the build itself
      - TEST_RESULTS: /tmp/test-results # path to where test results will be saved
      - GO111MODULE: on

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run: go mod download
      - run: sudo apt install -y postgresql-client

      #  CircleCi's Go Docker image includes netcat
      #  this allows polling the redis port to confirm it is open before proceeding
      - run:
          name: Waiting for redis to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 6379 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for redis && exit 1
      
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      
      - run:
          name: Create database
          command: psql --username=postgres -c "CREATE DATABASE test;"
      
      - run:
          name: Initialize the database
          command: |
            for f in /gosaas/migrations/*.sql;
            do
              psql --username=postgres -d test -f $f
            done


      - run:
          name: Run unit tests
          # store the results of our tests in the $TEST_RESULTS directory
          command: |
            go test -tags mem ./... | tee ${TEST_RESULTS}/go-test.out

      - run: go build # pull and build dependencies for the project

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results